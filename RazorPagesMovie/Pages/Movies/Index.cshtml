@page
@model RazorPagesMovie.Pages.Movies.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Movies</h1>

<p>
    
    <a asp-page="./Create" class="btn btn-primary">
        <i class="fas fa-trash-alt"></i> Add New Movie
    </a>
</p>

<form>
    <p>
        <select asp-for="MovieGenre" asp-items="Model.Genres" >
            <option value="">All</option>
        </select>
        Title: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
    </p>
</form>

<table class="table" id="movieTable">
    <thead>
        <style>
            th {
                position: sticky;
                top: 0;
                background-color: #f2f2f2;
                z-index: 2;
            }
        </style>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const table = document.getElementById("movieTable");
                const headers = table.querySelectorAll("thead th");
                const sortingState = {}; // Object to store sorting state for each column

                headers.forEach(header => {
                    header.addEventListener("click", () => {
                        const index = Array.from(headers).indexOf(header);
                        sortTable(table, index, sortingState);
                        updateHeaderArrows(headers, sortingState, index);
                    });
                });
            });

            function sortTable(table, column, sortingState) {
                const rows = Array.from(table.tBodies[0].rows);
                const sortOrder = sortingState[column] || 1; // Default to ascending order

                rows.sort((a, b) => {
                    const aValue = getColumnValue(a, column);
                    const bValue = getColumnValue(b, column);

                    return sortOrder * aValue.localeCompare(bValue, undefined, { numeric: true });
                });

                // Update sorting state for the current column
                sortingState[column] = -sortOrder;

                // Clear the existing rows
                while (table.tBodies[0].firstChild) {
                    table.tBodies[0].removeChild(table.tBodies[0].firstChild);
                }

                // Append the sorted rows
                rows.forEach(row => table.tBodies[0].appendChild(row));
            }

            function getColumnValue(row, column) {
                const cellValue = row.cells[column].innerText.trim();

                // Adjust the value for date columns
                if (isDateColumn(column)) {
                    return cellValue.slice(-4);
                } else {
                    return cellValue;
                }
            }

            function isDateColumn(column) {
                const headers = document.getElementById("movieTable").querySelectorAll("thead th");
                return headers[column].innerText.trim().toLowerCase().includes("date");
            }

            function updateHeaderArrows(headers, sortingState, clickedIndex) {
                headers.forEach((header, index) => {
                    const arrow = header.querySelector('.sort-arrow');
                    if (arrow) {
                        arrow.remove(); // Remove existing arrow
                    }

                    if (index === clickedIndex) {
                        const sortOrder = sortingState[index];
                        if (sortOrder) {
                            const arrowIcon = sortOrder === 1 ? '▲' : '▼';
                            const arrowElement = document.createElement('span');
                            arrowElement.className = 'sort-arrow';
                            arrowElement.textContent = arrowIcon;
                            header.appendChild(arrowElement);
                        }
                    }
                });
            }
        </script>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Rating)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Movie) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-primary">
                    <i class="fas fa-edit"></i> Edit
                </a> |
                <a asp-page="./Details" asp-route-id="@item.Id" class="btn btn-primary">
                    <i class="fas fa-info-circle"></i> Details
                </a> |
                <a asp-page="./Delete" asp-route-id="@item.Id" class="btn btn-danger">
                    <i class="fas fa-trash-alt"></i> Delete
                </a>
            </td>
        </tr>
        }
    </tbody>
</table>
